(set-option :produce-interpolants true)
(declare-fun a () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun c1 () (Array Int Int))
(declare-fun c2 () (Array Int Int))
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun e1 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun diff ((Array Int Int) (Array Int Int)) Int)
(declare-fun undefinedInt () Int)
(declare-fun empty_arrayInt () (Array Int Int))

(define-fun part_a () Bool (and
(= (diff a c1) i1)
(= (diff b c2) i1)
(= a (store a1 i3 e3))
(= a1 (store b i1 e1))
))
(define-fun part_b () Bool (and 
(< i1 i2)
(< i2 i3)
(distinct (select c1 i2) (select c2 i2))
))

(push)

(assert (! part_a :named _part_a))
(assert (! part_b :named _part_b))
(check-sat)
(echo "Interpolant obtained using Z3")
;(get-interpolant _part_a _part_b)

(pop)

(push)

(assert (forall ((y (Array Int Int)) (i Int) (e Int)) 
(=> (>= i 0) (= (select (store y i e) i) e))
))
(assert (forall ((y (Array Int Int)) (i Int) (j Int) (e Int)) 
(=> (distinct i j) (= (select (store y i e) j) (select y j)))
))
(assert (forall ((x (Array Int Int)) (y (Array Int Int)) ) 
(=> (distinct x y) (distinct (select x (diff x y)) (select y (diff x y))))
))
(assert (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int)) 
(=> (> i (diff x y)) (= (select x i) (select y i)))
))
(assert (forall ((x (Array Int Int))) (= (diff x x) 0)
))
(assert (forall ((x (Array Int Int)) (i Int)) 
(=> (< i 0) (= (select x i) undefinedInt))
))
(assert (forall ((i Int)) 
(= (select empty_arrayInt i) undefinedInt)
))

(assert (! part_a :named _part_a))
(assert (! part_b :named _part_b))
(check-sat)
;(echo "Interpolant obtained using Z3")
;(get-interpolant _part_a _part_b)

(pop)
