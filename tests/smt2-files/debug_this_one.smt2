; 
(set-info :status unknown)
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_main_~#values~0.base_primed| () Int)
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_main_~#values~0.offset_primed| () Int)
(declare-fun c_main_~v~0_primed () Int)
(declare-fun |c_main_~#set~0.base| () Int)
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(assert
 (let (($x17 (= (store |c_#length| |c_main_~#values~0.base_primed| 400000) |c_#length_primed|)))
 (let (($x12 (< |c_#StackHeapBarrier| |c_main_~#values~0.base_primed|)))
 (let (($x9 (= |c_main_~#values~0.offset_primed| 0)))
 (let (($x7 (= c_main_~v~0_primed 0)))
 (and true $x7 $x9 $x12 $x17))))))
(assert
 (let (($x33 (not (= (select |c_#valid_primed| |c_main_~#set~0.base|) 1))))
 (let (($x30 (= (select |c_#valid| |c_main_~#set~0.base|) 1)))
 (let (($x26 (= |c_#valid_primed| (store |c_#valid| |c_main_~#values~0.base_primed| 1))))
 (let (($x22 (not (= |c_main_~#values~0.base_primed| 0))))
 (let (($x20 (= (select |c_#valid| |c_main_~#values~0.base_primed|) 0)))
 (and true $x20 $x22 $x26 $x30 $x33)))))))
(check-sat)
