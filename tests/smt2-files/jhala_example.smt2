(set-option :produce-interpolants true)
(declare-fun a () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun i () Int)
(declare-fun e () Int)
(declare-fun j1 () Int)
(declare-fun j2 () Int)

(define-fun part_a () Bool 
(= a (store b i e))
)
(define-fun part_b () Bool (and 
(distinct (select a j1) (select b j1)) 
(distinct (select a j2) (select b j2))
(distinct j1 j2)
))

(push)
(assert (! part_a :named _part_a))
(assert (! part_b :named _part_b))
(check-sat)
(get-interpolant _part_a _part_b)
(pop)

(push)
(declare-fun diff ((Array Int Int) (Array Int Int)) Int)
(declare-fun undefinedInt () Int)
(declare-fun empty_arrayInt () (Array Int Int))

(define-fun b2 () (Array Int Int)
(store b (diff a b) (select a (diff a b)))
)
(define-fun diff2ab () Int
(diff a b2)
)
(define-fun _interpolant () Bool
(or (= (diff a b) 0) (and (= (select a diff2ab) (select b diff2ab))))
)

(assert (forall ((y (Array Int Int)) (i Int) (e Int)) 
(=> (>= i 0) (= (select (store y i e) i) e))
))
(assert (forall ((y (Array Int Int)) (i Int) (j Int) (e Int)) 
(=> (distinct i j) (= (select (store y i e) j) (select y j)))
))
(assert (forall ((x (Array Int Int)) (y (Array Int Int)) ) 
(=> (distinct x y) (distinct (select x (diff x y)) (select y (diff x y))))
))
(assert (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int)) 
(=> (> i (diff x y)) (= (select x i) (select y i)))
))
(assert (forall ((x (Array Int Int))) (= (diff x x) 0)
))
(assert (forall ((x (Array Int Int)) (i Int)) 
(=> (< i 0) (= (select x i) undefinedInt))
))
(assert (forall ((i Int)) 
(= (select empty_arrayInt i) undefinedInt)
))

(push)
(assert (distinct a b))
(assert (= j1 (diff a b)))
(assert part_b)
(assert _interpolant)
(echo "B-part test")
(check-sat)
(pop)

(push)
(assert (not (=> part_a  _interpolant))) 
(echo "A-part test")
(check-sat)
(pop)

(pop)
