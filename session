let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/AXDInterpolator
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +26 src/AXDSignature.cpp
badd +61 src/AXDInterpolant.cpp
badd +1 bin/mathsat
badd +4 tests/main.cpp
badd +5 include/AXDInterpolant.h
badd +22 src/AXDInterpolantCircularPairIterator.cpp
badd +41 Makefile
badd +32 include/Preprocess.h
badd +3 include/StandardInput.h
badd +163 src/Preprocessor.cpp
badd +225 src/StandardInput.cpp
badd +34 src/StandardInputDiffMap.cpp
badd +4 StandardInputWriterVector.cpp
badd +51 include/AXDSignature.h
badd +3 src/AXDSignatureZ3ExprComparator.cpp
badd +1 src/StandardInputWriterVector.cpp
badd +2470 /usr/include/c++/10.2.0/bits/basic_string.h
badd +2054 include/z3++.h
badd +16 src/main.cpp
argglobal
%argdel
$argadd src/AXDSignature.cpp
edit src/AXDSignature.cpp
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
3wincmd h
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
wincmd w
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 31 + 38) / 77)
exe 'vert 1resize ' . ((&columns * 86 + 188) / 376)
exe '2resize ' . ((&lines * 31 + 38) / 77)
exe 'vert 2resize ' . ((&columns * 86 + 188) / 376)
exe '3resize ' . ((&lines * 11 + 38) / 77)
exe 'vert 3resize ' . ((&columns * 86 + 188) / 376)
exe 'vert 4resize ' . ((&columns * 86 + 188) / 376)
exe 'vert 5resize ' . ((&columns * 86 + 188) / 376)
exe 'vert 6resize ' . ((&columns * 115 + 188) / 376)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 28 - ((26 * winheight(0) + 15) / 31)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
28
normal! 0
wincmd w
argglobal
if bufexists("src/main.cpp") | buffer src/main.cpp | else | edit src/main.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 16 - ((15 * winheight(0) + 15) / 31)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
16
normal! 012|
wincmd w
argglobal
if bufexists("include/StandardInput.h") | buffer include/StandardInput.h | else | edit include/StandardInput.h | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 24 - ((5 * winheight(0) + 5) / 11)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
24
normal! 05|
wincmd w
argglobal
if bufexists("src/AXDInterpolant.cpp") | buffer src/AXDInterpolant.cpp | else | edit src/AXDInterpolant.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 55 - ((52 * winheight(0) + 37) / 75)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
55
normal! 022|
wincmd w
argglobal
if bufexists("src/StandardInput.cpp") | buffer src/StandardInput.cpp | else | edit src/StandardInput.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 138 - ((2 * winheight(0) + 37) / 75)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
138
normal! 022|
wincmd w
argglobal
if bufexists("src/StandardInput.cpp") | buffer src/StandardInput.cpp | else | edit src/StandardInput.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 211 - ((39 * winheight(0) + 37) / 75)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
211
normal! 0
wincmd w
5wincmd w
exe '1resize ' . ((&lines * 31 + 38) / 77)
exe 'vert 1resize ' . ((&columns * 86 + 188) / 376)
exe '2resize ' . ((&lines * 31 + 38) / 77)
exe 'vert 2resize ' . ((&columns * 86 + 188) / 376)
exe '3resize ' . ((&lines * 11 + 38) / 77)
exe 'vert 3resize ' . ((&columns * 86 + 188) / 376)
exe 'vert 4resize ' . ((&columns * 86 + 188) / 376)
exe 'vert 5resize ' . ((&columns * 86 + 188) / 376)
exe 'vert 6resize ' . ((&columns * 115 + 188) / 376)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
