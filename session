let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/AXDInterpolator
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +20 src/AXDSignature.cpp
badd +215 src/AXDInterpolant.cpp
badd +1 bin/mathsat
badd +4 tests/main.cpp
badd +39 include/AXDInterpolant.h
badd +22 src/AXDInterpolantCircularPairIterator.cpp
badd +41 Makefile
badd +8 include/Preprocess.h
badd +66 include/StandardInput.h
badd +62 src/Preprocessor.cpp
badd +196 src/StandardInput.cpp
badd +3 src/StandardInputDiffMap.cpp
badd +4 StandardInputWriterVector.cpp
badd +10 include/AXDSignature.h
badd +3 src/AXDSignatureZ3ExprComparator.cpp
badd +2 src/StandardInputWriterVector.cpp
badd +2470 /usr/include/c++/10.2.0/bits/basic_string.h
badd +2054 include/z3++.h
badd +40 src/main.cpp
badd +9 ~/b.cpp
argglobal
%argdel
$argadd src/AXDSignature.cpp
edit include/AXDSignature.h
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 1resize ' . ((&columns * 78 + 146) / 293)
exe '2resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 2resize ' . ((&columns * 57 + 146) / 293)
exe '3resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 3resize ' . ((&columns * 136 + 146) / 293)
exe '4resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 4resize ' . ((&columns * 136 + 146) / 293)
exe '5resize ' . ((&lines * 39 + 42) / 85)
exe 'vert 5resize ' . ((&columns * 83 + 146) / 293)
exe '6resize ' . ((&lines * 43 + 42) / 85)
exe 'vert 6resize ' . ((&columns * 83 + 146) / 293)
exe '7resize ' . ((&lines * 19 + 42) / 85)
exe 'vert 7resize ' . ((&columns * 72 + 146) / 293)
exe '8resize ' . ((&lines * 63 + 42) / 85)
exe 'vert 8resize ' . ((&columns * 72 + 146) / 293)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 31 - ((23 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
31
normal! 0
wincmd w
argglobal
if bufexists("include/AXDInterpolant.h") | buffer include/AXDInterpolant.h | else | edit include/AXDInterpolant.h | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 39 - ((20 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
39
normal! 022|
wincmd w
argglobal
if bufexists("src/AXDInterpolant.cpp") | buffer src/AXDInterpolant.cpp | else | edit src/AXDInterpolant.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 192 - ((9 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
192
normal! 013|
wincmd w
argglobal
if bufexists("include/StandardInput.h") | buffer include/StandardInput.h | else | edit include/StandardInput.h | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 90 - ((21 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
90
normal! 0
wincmd w
argglobal
if bufexists("src/StandardInput.cpp") | buffer src/StandardInput.cpp | else | edit src/StandardInput.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 195 - ((17 * winheight(0) + 19) / 39)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
195
normal! 03|
wincmd w
argglobal
if bufexists("src/StandardInput.cpp") | buffer src/StandardInput.cpp | else | edit src/StandardInput.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 252 - ((34 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
252
normal! 03|
wincmd w
argglobal
if bufexists("src/StandardInputWriterVector.cpp") | buffer src/StandardInputWriterVector.cpp | else | edit src/StandardInputWriterVector.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 2 - ((0 * winheight(0) + 9) / 19)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2
normal! 0
wincmd w
argglobal
if bufexists("src/StandardInputDiffMap.cpp") | buffer src/StandardInputDiffMap.cpp | else | edit src/StandardInputDiffMap.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 3 - ((0 * winheight(0) + 31) / 63)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
3
normal! 0
wincmd w
3wincmd w
exe '1resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 1resize ' . ((&columns * 78 + 146) / 293)
exe '2resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 2resize ' . ((&columns * 57 + 146) / 293)
exe '3resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 3resize ' . ((&columns * 136 + 146) / 293)
exe '4resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 4resize ' . ((&columns * 136 + 146) / 293)
exe '5resize ' . ((&lines * 39 + 42) / 85)
exe 'vert 5resize ' . ((&columns * 83 + 146) / 293)
exe '6resize ' . ((&lines * 43 + 42) / 85)
exe 'vert 6resize ' . ((&columns * 83 + 146) / 293)
exe '7resize ' . ((&lines * 19 + 42) / 85)
exe 'vert 7resize ' . ((&columns * 72 + 146) / 293)
exe '8resize ' . ((&lines * 63 + 42) / 85)
exe 'vert 8resize ' . ((&columns * 72 + 146) / 293)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
