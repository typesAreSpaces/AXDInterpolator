let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/AXDInterpolator
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 src/AXDSignature.cpp
badd +427 src/AXDInterpolant.cpp
badd +1 bin/mathsat
badd +4 tests/main.cpp
badd +1 include/AXDInterpolant.h
badd +1 src/AXDInterpolantCircularPairIterator.cpp
badd +41 Makefile
badd +2 include/Preprocess.h
badd +5 include/StandardInput.h
badd +1 src/Preprocessor.cpp
badd +44 src/StandardInput.cpp
badd +24 src/StandardInputDiffMap.cpp
badd +4 StandardInputWriterVector.cpp
badd +7 include/AXDSignature.h
badd +3 src/AXDSignatureZ3ExprComparator.cpp
badd +2 src/StandardInputWriterVector.cpp
badd +2470 /usr/include/c++/10.2.0/bits/basic_string.h
badd +2054 include/z3++.h
badd +40 src/main.cpp
badd +9 ~/b.cpp
badd +14 src/AXDInterpolantQF_TO_Rewriter.cpp
badd +3 src/AXDInterpolantDefineDeclarations.cpp
badd +3 src/AXDInterpolantTest.cpp
argglobal
%argdel
$argadd src/AXDSignature.cpp
edit include/AXDInterpolant.h
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 43 + 32) / 64)
exe 'vert 1resize ' . ((&columns * 105 + 171) / 342)
exe '2resize ' . ((&lines * 43 + 32) / 64)
exe 'vert 2resize ' . ((&columns * 105 + 171) / 342)
exe '3resize ' . ((&lines * 18 + 32) / 64)
exe 'vert 3resize ' . ((&columns * 105 + 171) / 342)
exe '4resize ' . ((&lines * 18 + 32) / 64)
exe 'vert 4resize ' . ((&columns * 105 + 171) / 342)
exe '5resize ' . ((&lines * 43 + 32) / 64)
exe 'vert 5resize ' . ((&columns * 130 + 171) / 342)
exe '6resize ' . ((&lines * 18 + 32) / 64)
exe 'vert 6resize ' . ((&columns * 130 + 171) / 342)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 50 - ((16 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
50
normal! 08|
wincmd w
argglobal
if bufexists("src/Preprocessor.cpp") | buffer src/Preprocessor.cpp | else | edit src/Preprocessor.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 17 - ((16 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
17
normal! 0
wincmd w
argglobal
if bufexists("src/AXDInterpolant.cpp") | buffer src/AXDInterpolant.cpp | else | edit src/AXDInterpolant.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 80 - ((17 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
80
normal! 0
wincmd w
argglobal
if bufexists("src/AXDInterpolant.cpp") | buffer src/AXDInterpolant.cpp | else | edit src/AXDInterpolant.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 404 - ((9 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
404
normal! 08|
wincmd w
argglobal
if bufexists("src/AXDInterpolantQF_TO_Rewriter.cpp") | buffer src/AXDInterpolantQF_TO_Rewriter.cpp | else | edit src/AXDInterpolantQF_TO_Rewriter.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 7 - ((6 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
7
normal! 0
wincmd w
argglobal
if bufexists("src/AXDInterpolant.cpp") | buffer src/AXDInterpolant.cpp | else | edit src/AXDInterpolant.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 222 - ((9 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
222
normal! 03|
wincmd w
6wincmd w
exe '1resize ' . ((&lines * 43 + 32) / 64)
exe 'vert 1resize ' . ((&columns * 105 + 171) / 342)
exe '2resize ' . ((&lines * 43 + 32) / 64)
exe 'vert 2resize ' . ((&columns * 105 + 171) / 342)
exe '3resize ' . ((&lines * 18 + 32) / 64)
exe 'vert 3resize ' . ((&columns * 105 + 171) / 342)
exe '4resize ' . ((&lines * 18 + 32) / 64)
exe 'vert 4resize ' . ((&columns * 105 + 171) / 342)
exe '5resize ' . ((&lines * 43 + 32) / 64)
exe 'vert 5resize ' . ((&columns * 130 + 171) / 342)
exe '6resize ' . ((&lines * 18 + 32) / 64)
exe 'vert 6resize ' . ((&columns * 130 + 171) / 342)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
